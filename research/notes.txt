# Notes for Bachelor thesis
## Package manager 
*generalize and abstract what a package manager is and find research/books for this*
To build any package, you need to:
1. Construct an environment with all the tools needed to build the package.
2. Execute a build script to run all the build steps.
Repeat this for every packet.

### The problem of non purely functional package managers
Mutate the global state of the system, 
* cannot install two different versions of a package as installation paths collide
This is currently solved by creating a container per service (especially when different versions are needed). Then you need orchestration tools, setting up shared cache of packages and new machines to monitor. Mixing of two stacks requires recompilation.

### Purely functional package manager
No assumptions on the global state of the system. 
#### Example: Nix
Everything in the nix store is immutable.

> Def Derivation: Derivations are the building blocks of a Nix system, from a file system view point. The Nix language is used to describe such derivations. [^https://nixos.org/guides/nix-pills/our-first-derivation.html]

*Example*: /nix/store/s4zia7hhqkin1di0f187b79sa2srhv6k-bash-4.2-p45/. This is a directory in the Nix store which contains bin/bash. There's no /bin/bash, there's only that self-contained build output in the store. The same goes for coreutils and everything else. To make them convenient to use from the shell, Nix will arrange for binaries to appear in your `PATH` as appropriate.  

### Tradeoffs of purely functional: Mutable vs immutable (Nix)
When **upgrading a library**, most package managers replace it in-place. Since Nix derivations are immutable, upgrading a library like glibc means recompiling all applications, because the glibc path to the Nix store has been hardcoded. 

**Security updates?**

**Composition of applications at runtime is hard**. (ex. firefox needs magic from nix to run smoothly)

## Replit article [^https://blog.replit.com/nix, 25.02.2022] (informal introduction)
### Problem they are trying to solve
support only fixed set of languages and OS packages (some are outdated)
ideally *user should be able to use any language and install any package with minimal fuss*

### Current situation
* pre baked OS image to fit all our languages 
	* is growing, 
	* hard to maintain, 
	* new packages can break existing functionality
* OS in which REPLs run in is immutable 

## Nix OS package manager (declarative, reproducible)
### Features
* Highly cacheable package store
* allows for building environments in a composable way.
	* allows user to build combinations of dev. envs. without having to maintain a monolithic docker image.
* Nix has content addressable store which handles conflicts even with many versions of the same package.
* Nix is *preloaded* with over 60'000 packages. Meaning every repl has already all packages available and they don't need to be downloaded.
* 

### How Replit implements it in an Cloud-IDE on a high level
#### Configuration
specify dependencies for development environment in `replit.nix` and Nix will build it for you.
Make run command modifiable through the `.replit` file.  

#### Idea
Prebuilt a Nix store with almost every package from nix package registry already downloaded. Mount this 1 TB shared disk (each instance has own memory) image into every repl unter `/nix`. This means one can build a single disk image with all Nix packages *once* and share it among every single repl. 
This requires *package caching*! 
The goal is when activating an environment, it will only be populated with the exact packages you depend on from the store.

### How Nix works [^https://nixos.org/guides/how-nix-works.html, 25.02.2022]
Nix is a purely functional package manager--> packages don't have side-effects. 
Nix stores packages in the *Nix store* (`/nix/store`) where each package has its own unique subdirectory where part of the name is a hash of the packages build dependency graph(sources, dependencies, compiler flags, etc.) and thus captures all its dependencies and versions.

Package management operations always add new versions in different paths and are therefore *atomic*. This means old versions are still there after an upgrade and you can roll back.

A quick analogy with programming languages: you have the heap with all the objects, that corresponds to the Nix store. You have objects that point to other objects, those correspond to derivations. 

#### Functional package language
Packages are build from *Nix expressions*, which is a simple functional language. A Nix expression describes everything that goes into a package build action (a “derivation”): other packages, sources, the build script, environment variables for the build script, etc. Nix tries very hard to ensure that Nix expressions are deterministic: building a Nix expression twice should yield the same result.

Easy to support variants of a package (call nix expression as a function with different arguments) and they don't conflict with each other in the Nix store.

Nix expressions generally describe how to build packages from source, which could cause quite a bit of build activity, as not only Firefox but also all its dependencies (all the way up to the C library and the compiler) would have to built, at least if they are not already in the Nix store. 
Nix can automatically skip building from source and instead use a binary cache, a web server that provides pre-built binaries. For instance, when asked to build /nix/store/b6gvzjyb2pg0…-firefox-33.1 from source, Nix would first check if the file http://cache.nixos.org/b6gvzjyb2pg0….narinfo exists, and if so, fetch the pre-built binary referenced from there; otherwise, it would fall back to building from source. 
#### Profiles [^https://nixos.org/manual/nix/stable/package-management/profiles.html]
Profiles in Nix allow different users to have different configurations and to do atomic updates and rollbacks. They referred to in `ls -l ~/.nix-profile/`.

Nix uses a directory tree of symlinks to achieve the linking between user environments (configurations) and the active packages they use. 

Each profile can have *generations* grouped to it. A new generation is created by each `nix-env` operation (i.e. when installing a composition of new packages, or changing the profile) and is based on the current one. This allows for atomic updates and rollbacks of different generations.
     
![Directory Tree of Symlinks for Profiles](./graphics/nix-user-environments.png)
**Closures**[^https://nixos.org/guides/nix-pills/enter-environment.html]
"The closures of a derivation is a list of all its dependencies, recursively, including absolutely everything necessary to use that derivation." 
**Channels** [^https://nixos.org/manual/nix/stable/command-ref/nix-channel.html] A Nix channel is a mechanism that allows you to automatically stay up-to-date with a set of pre-built Nix expressions. A Nix channel is just a URL that points to a place containing a set of Nix expressions. 
#### Managing build envs
The command **nix-shell** will build the dependencies of the specified derivation, but  not  the  derivation
itself.  It will then start an interactive shell in which all environment variables defined by the derivation path have been set to their corresponding values, and the script $stdenv/setup has been  sourced.
This is useful for reproducing the environment of a derivation for development.
       
Many nix expressions are provided by Nix.

## How NixOS works [^https://nixos.org/guides/how-nix-works.html, 25.02.2022]
In NixOS, the entire operating system — the kernel, applications, system packages, configuration files, and so on — is built by the Nix package manager. 
This implies that there is no /bin, /sbin, /lib, /usr, and so on. Instead all packages are kept in /nix/store. (The only exception is a symlink /bin/sh to Bash in the Nix store.) Not using ‘global’ directories such as /bin is what allows multiple versions of a package to coexist. Nix does have a /etc to keep system-wide configuration files, but most files in that directory are symlinks to generated files in /nix/store. 

### System configuration model
You configure a NixOS system by writing a specification of the functionality that you want on your machine in /etc/nixos/configuration.nix. This config is realised by the command: 
```
$ nixos-rebuild switch
```
* **Reliable upgrades**: nixos-rebuild switch will always produce the same result, no matter which packages are already on your system.
* **Atomic upgrades**: configurations changes are *atomic*.
* **Rollbacks**: old configs show up in the Grub boot menu. 
* **Reproducible system configs** copy the configuration.nix to the target NixOS machine
## Nix Tools
### Niv
To achieve reproducible builds we need to pin certain packages like the nix version or nixpgs version. Niv makes adding and *updating* dependencies in Nix easy. It could be used to update  the pinned channels to the latest versions which are specified in nixpkgs.
### Nixery 
Provides ad-hoc container images which can contain any packages from `nixpkgs`. The package can be pulled from the registry by separating each package you want to include by a slash.
```
docker pull nixery.dev/shell/git/htop
```

The images are build by Nix using a special layering strategy, which optimises for cache efficiency. Nixery caches the layers with an algorithm that is extended from the dockerTools.buildLayeredImage function offered by Nix.  

One has to set up a private Nixery registry instance to use Nixery in production.

### Arion 
Build an run applications that consist of multiple docker containers.

Configuration with Nix language.

Build on top of Docker Compose


## Language specific configurations and tradeoffs


## Docker [^https://dominikbraun.io/blog/docker/docker-images-and-their-layers-explained/, 28.02.2022]
Docker image consists of multiple read-only layers. When building an image from a Dockerfile, each Dockerfile instruction that modifies the filesystem (ADD, COPY, RUN) of the base image creates a new layer. This **new layer contains the actual modification to the filesystem**, thus representing a diff to the previous state.

**Docker image** is a configuration object stored in JSON format. Contains an ordered list of layers (only reference), each identified by Content Addressable IDs <algorithm>:<hash value of the layer>. Inspect the image layer with `docker inspect`.

The image is separated from the layers, as it allows multiple custom images to reference the same layer, which has to be only stored once on disk.

### Building image
Local builds: temporary image is created for each layer that gets committed to the final image. This allows using the build cache for better performance.
Layers that do not modify the filesystem produce also temporary images but have size of 0 bytes. These are combined into a single, empty layer.
When inspecting the `image history` if an image entry has <missing> then it originated from the base image which has not been built locally and represent only layers (not images).

### How images are stored
Images (JSON objects) are stored in /var/lib/docker/<driver>/imagedb. Typically <driver> is overlay2 (= storage driver). 
### How layers are stored
A layer has its own directory in /var/lib/docker/<driver>/layerdb/<algorithm>.<algorithm> is the algorithm used for the layer digest. According to the layer list above, this is sha256.
The directory /var/lib/docker/overlay2/layerdb/sha256 contains all the *layer directories*, each is named after its hash value.
Each directory contains:
* diff: Contains the hash value of the layer and therefore is identical to the directory name
* size: Contains the layer's physical size
* cache-id: Contains the ID of the associated layer cache
### Caches
Docker stores all caches in /var/lib/docker/<driver>. Just as with layer directories, the directory name corresponds to the cache ID. Each layer has one cache --> six cache directories. 

Cache directory contains a subdirectory called `diff` which represents the modification to the filesystem.

These caches merge together to the final image progressively. This type of filesystem is called `Union Filesystem`[^https://en.wikipedia.org/wiki/Union_mount]

**Result** This highly flexible system allows Docker to build and store images very efficiently. 

### The writable layer
All these layers are read-only layers, thus a container cannot modify a file from the image filesystem. The advantage of this restriction is that any number of containers can be started from one and the same image. Plus, the state of a freshly created container is predictable.
To grant at least some kind of write access to containers, Docker utilises a mechanism called *Copy on Write*. When a container is started, a thin writable layer is laid on top of the read-only image layers. Once the container modifies a file from the image filesystem at runtime, the respective file is copied into that so-called *container layer* and will be modified there. From the container's point of view this is the original file, because the copied file overlays the file from the image.

Storing only modified files in a thin, ephemeral container layer enables short start-up times for containers. When a container is removed, the writable container layer disappears as well and the original image remains unchanged.

## Combination of Docker and Nix
Usage of Docker with Nix is possible. Advantages are:
* Reproducible Docker images via Nix
* Simplified deployments via containers

### Improve Caching of Docker with Nix
Efficient layering in docker images is difficult, as each command has no restriction and can change files in shared global directories. Therefore the only way to capture the effects of a command (i.e. installing a package) the implementation needs to snapshot the entire filesystem.

Nix on the other hand has restrictions and a package build can't write to arbitrary places on the disk (only to the directory $out=store path). 

Docker limits the number of layers at 125. Big packages with lots of dependencies can have more than 125 store paths. A possible solution is to prioritise the paths (dependencies) which are referenced (directly) the most and put each of them in a separate layer. If there are more than 124 paths, then the rest of the paths are put into one layers.

There are other solutions possible which take into account indirect references of packages to merge a small number of paths into their own layers instead of one. 

This layer sharing and prioritisation improves image push and pull times and splitting your application into multiple images, which allows Docker to pull images in parallel, makes more sense due to the automatic splitting and caching.

## Proposed approaches for making flexible container
### Approach 1: Don't build image at runtime if config changes
The flow of this approach could look like this:
./graphics/approach1_V1.1.jpg

We start with a minimal base image with Nix installed. This base image could be bare or be based on a predefined(not mutable by the user) base_config.nix which specifies a programming language and the most common used libraries. The idea is that the user can extend this minimal environment with additional libraries in a local local_config.nix file. The API for this could i.e. allow for additional build inputs and hooks to set environment variables. We assume in the following that a container of the base image is running and has the config.nix file available. 

To execute a script the user calls nix-shell (specified as the RUN command).
Here is a brief iteration of what happens when the nix-shell is called to build an environment:
1.

Naively, with this approach one user does not benefit from other users having already downloaded the dependencies and stored them in the `nix/store`, as each container has its own store which is non-persistent. It is therefor necessary for this approach to be feasible that we use a shared Nix store which is stored on a shared disk and mounted into each repl container. 

A shared store for every user is problematic for security reasons a one user could be able to change binaries in the store of other users and make arbitrary symlinks. [show and try possible attacks]. However, Nix has a multi-user support to solve this problem. [Describe the properties of multi-user] We need to create a new user for each container.

#### Performance evaluation

##### Measurements

**Initial build time**: 
**Nix-shell startup**
 
**Number of layers:**

**Disk usage**

**With seeded store:**

**With cached nix-shell evaluation and environment variables**

### Approach 2: Build new image every time the config changes
For this approach I present two possible solutions. 

./graphics/approach2_V1.1.jpg

#### Build new images using builder container
 

#### Remarks on the Nixery Solution
It is unclear how to use Nixery to specify and include libraries that are used by a programming ecosystem. The first reason is that Nix requires you to wrap the needed libraries into a derivation and then include it as a package. The second reason is the API of Nixery which only allows to specify the packages by *package name* in a path and not as a nix expression.

A first possible solution for this problem could be to use the packages that are not libraries as a base image which is pulled from Nixery and then build a new image with the libraries in a nix expression.

A second possibility would be to   

There isn't a straightforward way to define the API of the config file and then transform the config file to the path format of Nixery and include the libraries separately without loosing the flexibility of a nix expression.

This is why we decided to drop this direction from further development.
  

 